name: Get vars

inputs:
  yaml:
    required: true

outputs:
  access_domain:
    value: ${{ steps.get-vars.outputs.access_domain }}
  access_role:
    value: ${{ steps.get-vars.outputs.access_role }}
  backend_account:
    value: ${{ steps.get-vars.outputs.backend_account }}
  backend_bucket:
    value: ${{ steps.get-backend-bucket.outputs.backend_bucket }}
  backend_region:
    value: ${{ steps.get-vars.outputs.backend_region }}
  deployment_account:
    value: ${{ steps.get-vars.outputs.backend_account }} # TODO:
  deployment_name:
    value: ${{ steps.get-deployment-name.outputs.name }}
  deployment_region:
    value: ${{ steps.get-vars.outputs.backend_region }} # TODO:
  environment:
    value: ${{ inputs.environment }}
  oidc_principal:
    value: ${{ steps.get-vars.outputs.oidc_principal }}
  state_file:
    value: ${{ steps.get-state-file.outputs.state_file }}
  token:
    value: ${{ steps.get-token.outputs.token }}

runs:
  using: composite
  steps:

    - name: Get vars
      id: get-vars
      shell: bash
      run: |
        # get/vars

        yaml="${{ inputs.yaml }}"
        echo "[$yaml]"
        IFS=$'\n' lines=($yaml)
        for l in "${lines[@]}" ; do
          key=${l%%:*}
          val=${l##*: }
          if [ -n "$val" ] ; then
            # echo "$key=$val" | tee -a $GITHUB_OUTPUT
            echo "$key=$val" >> $GITHUB_OUTPUT
          else
            if [[ "$key" != "private_access_token" && "$key" != "terraform_private_key" ]]; then # TODO: improve
            echo "ERROR: $key is empty. exiting."
            exit 1
          fi
        done

    - name: Get Token
      id: get-token
      uses: stormreply/storm-library-for-terraform/.github/actions/get/token@main
      with:
        private_access_token: ${{ inputs.private_access_token }}
        terraform_app_id: ${{ inputs.terraform_app_id }}
        terraform_private_key: ${{ inputs.terraform_private_key }}

    - name: Get backend bucket
      id: get-backend-bucket
      uses: stormreply/storm-library-for-terraform/.github/actions/get/backend-bucket@main
      with:
        backend_account: ${{ steps.get-vars.outputs.backend_account }}

    - name: Get deployment name
      id: get-deployment-name
      uses: stormreply/storm-library-for-terraform/.github/actions/get/deployment-name@main
      with:
        environment: ${{ inputs.environment }}
        token: ${{ steps.get-token.outputs.token}}

    - name: Get state file
      id: get-state-file
      uses: stormreply/storm-library-for-terraform/.github/actions/get/state-file@main
      with:
        deployment_name: ${{ steps.get-deployment-name.outputs.name }}

    - name: Show vars
      id: show-vars
      shell: bash
      run: |
        #
        pat="${{ inputs.private_access_token }}"
        tpk="${{ inputs.terraform_private_key }}"
        echo "access domain:         ${{ steps.get-vars.outputs.access_domain }}"
        echo "access role:           ${{ steps.get-vars.outputs.access_role }}"
        echo "backend account:       ${{ steps.get-vars.outputs.backend_account }}"
        echo "backend bucket:        ${{ steps.get-backend-bucket.outputs.backend_bucket}}"
        echo "backend region:        ${{ steps.get-vars.outputs.backend_region }}"
        echo "deployment account:    ${{ steps.get-vars.outputs.backend_account }}" # TODO:
        echo "deployment name:       ${{ steps.get-deployment-name.outputs.name }}"
        echo "deployment region:     ${{ steps.get-vars.outputs.backend_region }}" # TODO:
        echo "environment:           ${{ inputs.environment }}"
        echo "oidc principal:        ${{ steps.get-vars.outputs.oidc_principal }}"
        echo "private access token:  length: ${#pat}"
        echo "state file:            ${{ steps.get-state-file.outputs.state_file }}"
        echo "terraform app id:      ${{ inputs.terraform_app_id }}"
        echo "terraform private key: length: ${#tpk}"
