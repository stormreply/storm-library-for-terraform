name: Prepare

inputs:
  environment:
    required: false
  region:
    required: true
  terraform_app_id:
    required: true
  terraform_private_key:
    required: true
  use_oidc:
    required: false
    default: true

outputs:
  # backend_role:
  #   description: Name of the Terraform backend role
  #   value: ${{ steps.create-vars.outputs.backend_role }}
  # deployment_role:
  #   description: Name of the Terraform deployment role
  #   value: ${{ steps.create-vars.outputs.deployment_role }}
  state_file:
    description: Name of the state file
    value: ${{ steps.create-vars.outputs.state_file }}

runs:
  using: composite
  steps:

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      shell: bash
      run: echo "$GITHUB_CONTEXT"

    - name: Create Github app token
      uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ inputs.terraform_app_id }}
        private-key: ${{ inputs.terraform_private_key }}
        owner: ${{ github.repository_owner }}

    - name: Get Storm Library catalog item
      shell: bash
      id: catalog-item
      run: |
        TOKEN=${{ steps.app-token.outputs.token }}
        curl \
          -H "Accept: application/vnd.github.raw" \
          -o catalog.yaml \
          https://x-access-token:$TOKEN@api.github.com/repos/stormreply/terraform-workflow-controller/contents/catalog.yaml
        repository=${{ github.repository }}
        repo=${repository##*/}
        yq '.catalog["'${repo}'"]' catalog.yaml > catalog_item.yaml
        rm catalog.yaml

    - name: Create variables
      id: create-vars
      shell: bash
      run: |
        repository=${{ github.repository }}
        repo=${repository##*/}
        # echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT

        catalog_reference="slt-$(cat catalog_item.yaml | yq .id)"
        name="${catalog_reference}-${repo}"
        [ -n "${{ inputs.environment }}" ] && name="${name}-${{ inputs.environment }}"
        echo "state_file=${name}.tfstate" >> $GITHUB_OUTPUT

        echo "backend_role=${name}-terraform-backend" >> $GITHUB_OUTPUT
        echo "deployment_role=${name}-terraform-deployment" >> $GITHUB_OUTPUT

        cat << EOF >> github.tfvars
        deployment = {
          actor       = "${{ github.actor }}"
          environment = "${{ inputs.environment }}"
          name        = "${name}"
          ref         = "${{ github.ref }}"
          ref_name    = "${{ github.ref_name }}"
          repo        = "${repo}"
          repository  = "${{ github.repository }}"
          sha         = "${{ github.sha }}"
          time        = "$(date)"
        }
        EOF

        cat github.tfvars

    - name: Set up access token
      shell: bash
      run: |
        TOKEN=${{ steps.app-token.outputs.token}}
        git config --global url."https://x-access-token:$TOKEN@github.com/".insteadOf "https://github.com/"

    - name: Download providers.tf
      shell: bash
      run: |
        TOKEN=${{ steps.app-token.outputs.token }}
        curl \
          -H "Accept: application/vnd.github.raw" \
          -o providers.tf \
          https://x-access-token:$TOKEN@api.github.com/repos/stormreply/terraform-workflow-controller/contents/providers.tf

    - name: Download backend.tf
      shell: bash
      run: |
        TOKEN=${{ steps.app-token.outputs.token }}
        curl \
          -H "Accept: application/vnd.github.raw" \
          -o backend.tf \
          https://x-access-token:$TOKEN@api.github.com/repos/stormreply/terraform-workflow-controller/contents/backend.tf

    - name: Assume terraform backend role
      if: inputs.oidc
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{inputs.region}}
        role-session-name: TerraformBackendSession
        role-to-assume: arn:aws:iam::${{ inputs.account_id }}:role/${{ steps.create-vars.outputs.backend_role }}

    - name: Configure terraform-backend-role
      shell: bash
      run: |
        aws configure set profile.backend.region ${{ inputs.region }}
        aws configure set profile.backend.aws_access_key_id $(echo ${AWS_ACCESS_KEY_ID})
        aws configure set profile.backend.aws_secret_access_key $(echo ${AWS_SECRET_ACCESS_KEY})
        aws configure set profile.backend.aws_session_token $(echo ${AWS_SESSION_TOKEN})

    - name: Assume terraform deployment role
      if: inputs.use_oidc
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.region }}
        role-session-name: TerraformDeploymentSession
        role-to-assume: arn:aws:iam::${{ inputs.account_id }}:role/${{ steps.create-vars.outputs.deployment_role }}

    - name: Configure terraform-deployment-role
      shell: bash
      run: |
        aws configure set profile.deployment.region ${{ inputs.region }}
        aws configure set profile.deployment.aws_access_key_id $(echo ${AWS_ACCESS_KEY_ID})
        aws configure set profile.deployment.aws_secret_access_key $(echo ${AWS_SECRET_ACCESS_KEY})
        aws configure set profile.deployment.aws_session_token $(echo ${AWS_SESSION_TOKEN})
