name: Prepare

inputs:
  account_id:
    required: false
  environment:
    required: false
  region:
    required: true
  terraform_app_id:
    required: true
  terraform_private_key:
    required: true
  use_oidc:
    required: false
    default: "true"

outputs:
  app_token:
    description: App token for GitHub API access
    value: ${{ steps.app-token.outputs.token }}
  bucket:
    description: Central administration bucket
    value: ${{ steps.get-bucket-name.outputs.bucket }}
  state_file:
    description: Name of the state file
    value: ${{ steps.get-state-file.outputs.state_file }}

runs:
  using: composite
  steps:

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      shell: bash
      run: echo "$GITHUB_CONTEXT"

    - name: Create Github app token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ inputs.terraform_app_id }}
        private-key: ${{ inputs.terraform_private_key }}
        owner: ${{ github.repository_owner }}

    - name: Get account id
      id: get-account-id
      if: inputs.account_id == ""
      uses: stormreply/terraform-workflow-controller/.github/actions/get-repository-variable@main
      with:
        repository: stormreply/terraform-workflow-controller
        token: ${{ steps.app-token.outputs.token}}
        variable: MAIN_ACCOUNT_ID

    - name: Set up access token
      shell: bash
      run: |
        TOKEN=${{ steps.app-token.outputs.token}}
        git config --global url."https://x-access-token:$TOKEN@github.com/".insteadOf "https://github.com/"

    - name: Download providers.tf
      shell: bash
      run: |
        TOKEN=${{ steps.app-token.outputs.token }}
        curl \
          -H "Accept: application/vnd.github.raw" \
          -o providers.tf \
          https://x-access-token:$TOKEN@api.github.com/repos/stormreply/terraform-workflow-controller/contents/providers.tf

    - name: Download backend.tf
      shell: bash
      run: |
        TOKEN=${{ steps.app-token.outputs.token }}
        curl \
          -H "Accept: application/vnd.github.raw" \
          -o backend.tf \
          https://x-access-token:$TOKEN@api.github.com/repos/stormreply/terraform-workflow-controller/contents/backend.tf

    - name: Get Storm Library catalog item
      shell: bash
      id: catalog-item
      run: |
        TOKEN=${{ steps.app-token.outputs.token }}
        curl \
          -H "Accept: application/vnd.github.raw" \
          -o catalog.yaml \
          https://x-access-token:$TOKEN@api.github.com/repos/stormreply/terraform-workflow-controller/contents/catalog.yaml
        repository=${{ github.repository }}
        repo=${repository##*/}
        yq '.catalog["'${repo}'"]' catalog.yaml > catalog_item.yaml
        rm catalog.yaml

    - name: Get bucket name
      id: get-bucket-name
      uses: stormreply/terraform-workflow-controller/.github/actions/get-bucket-name@main
      with:
        account_id: ${{ inputs.account_id || steps.get-account-id.output.value}}

    - name: Get deployment name
      id: get-deployment-name
      uses: stormreply/terraform-workflow-controller/.github/actions/get-deployment-name@main
      with:
        environment: ${{ inputs.environment }}

    - name: Get state file
      id: get-state-file
      uses: stormreply/terraform-workflow-controller/.github/actions/get-state-file@main
      with:
        deployment_name: ${{ steps.get-deployment-name.outputs.name }}

    - name: Create deployment variables
      shell: bash
      run: |
        repository=${{ github.repository }}
        repo=${repository##*/}
        deployment_name=${{ steps.get-deployment-name.outputs.name }}

        cat << EOF >> github.tfvars
        deployment = {
          actor       = "${{ github.actor }}"
          environment = "${{ inputs.environment }}"
          name        = "${deployment_name}"
          ref         = "${{ github.ref }}"
          ref_name    = "${{ github.ref_name }}"
          repo        = "${repo}"
          repository  = "${{ github.repository }}"
          sha         = "${{ github.sha }}"
          time        = "$(date)"
        }
        EOF

        cat github.tfvars

    - name: AWS configure
      uses: stormreply/terraform-workflow-controller/.github/actions/aws-configure@main
      with:
        account_id: ${{ inputs.account_id || steps.get-account-id.output.value }}
        region: ${{ inputs.region }}
        backend_role: slt-0-terraform-workflow-controller-backend
        deployment_role: slt-0-terraform-workflow-controller-deployment
        use_oidc: ${{ inputs.use_oidc }}