name: Setup roles
# TODO: Setup AWS config file would be more appropriate name
inputs:
  account_id:
    required: true
  region:
    required: true
  backend_role:
    required: false
  deployment_role:
    required: false

runs:
  using: composite
  steps:

    - name: Assume terraform backend role
      if: inputs.backend_role != ''
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{inputs.region}}
        role-session-name: TerraformBackendSession
        role-to-assume: arn:aws:iam::${{ inputs.account_id }}:role/${{ inputs.backend_role }}

    - name: Configure terraform-backend-role
      shell: bash
      run: |
        aws configure set profile.backend.region ${{ inputs.region }}
        aws configure set profile.backend.aws_access_key_id $(echo ${AWS_ACCESS_KEY_ID})
        aws configure set profile.backend.aws_secret_access_key $(echo ${AWS_SECRET_ACCESS_KEY})
        aws configure set profile.backend.aws_session_token $(echo ${AWS_SESSION_TOKEN})

    - name: Assume terraform deployment role
      if: inputs.deployment_role != ''
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.region }}
        role-session-name: TerraformDeploymentSession
        role-to-assume: arn:aws:iam::${{ inputs.account_id }}:role/${{ inputs.deployment_role }}

    - name: Configure terraform-deployment-role
      shell: bash
      run: |
        aws configure set profile.oidc.region ${{ inputs.region }}
        aws configure set profile.oidc.aws_access_key_id $(echo ${AWS_ACCESS_KEY_ID})
        aws configure set profile.oidc.aws_secret_access_key $(echo ${AWS_SECRET_ACCESS_KEY})
        aws configure set profile.oidc.aws_session_token $(echo ${AWS_SESSION_TOKEN})
