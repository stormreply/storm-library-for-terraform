name: Prepare repository

inputs:
  environment:
    required: true
  release:
    required: true
  terraform_app_id:
    required: true
  terraform_private_key:
    required: true

outputs:
  repository:
    value: ${{ steps.create_github_tfvars.outputs.repository }}

runs:
  using: "composite"
  steps:

    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      shell: bash
      run: echo "$GITHUB_CONTEXT"

    - uses: actions/create-github-app-token@v1
      id: app-token
      with:
        app-id: ${{ inputs.terraform_app_id }}
        private-key: ${{ inputs.terraform_private_key }}
        owner: ${{ github.repository_owner }}

    - name: Create github tfvars
      shell: bash
      run: |
        repository=${{ github.repository }}
        repo=${repository##*/}
        name="storm-${repo}-${{ inputs.environment }}"
        echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT

        cat << EOF >> github.tfvars
        deployment = {
          actor       = "${{ github.actor }}"
          environment = "${{ inputs.environment }}"
          name        = "${name}"
          ref         = "${{ github.ref }}"
          ref_name    = "${{ github.ref_name }}"
          release     = "${{ inputs.release }}"
          repo        = "${repo}"
          repository  = "${{ github.repository }}"
          sha         = "${{ github.sha }}"
          time        = "$(date)"
        }
        EOF
        cat github.tfvars

    - name: Set up access token
      shell: bash
      run: |
        TOKEN=${{ steps.app-token.outputs.token}}
        git config --global url."https://x-access-token:$TOKEN@github.com/".insteadOf "https://github.com/"

    - name: Download providers
      shell: bash
      run: |
        TOKEN=${{ steps.app-token.outputs.token }}
        curl \
          -H "Accept: application/vnd.github.raw" \
          -o providers.tf \
          https://x-access-token:$TOKEN@api.github.com/repos/stormreply/terraform-workflow-controller/contents/providers.tf
