name: Set repository variable

inputs:
  repository:
    required: true
  value:
    required: true
  variable:
    required: true

runs:
  using: composite
  steps:
    - name: Set repository variable
      shell: bash
      env:
        TOKEN: ${{ env.TOKEN }}
        VARIABLE: ${{ inputs.variable }}
        VALUE: ${{ inputs.value }}
        REPO: ${{ inputs.repository }}
      run: |
        # set/variable vars.${{ inputs.variable }} from ${{ inputs.repository }}
        output=$(
          curl -X PATCH \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$REPO/actions/variables/$VARIABLE \
            -d "{\"name\":\"$VARIABLE\", \"value\":\"$VALUE\"}" \
            -f \
          2> /dev/null \
          || \
          curl -X POST \
            -H "Authorization: Bearer $TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/$REPO/actions/variables \
            -d "{\"name\":\"$VARIABLE\", \"value\":\"$VALUE\"}" \
          2> /dev/null
        )
        status=$(echo "$output" | jq '( .status // empty )')
        # status is "" or HTTP error code
        if [ -n "$status" ] ; then
          echo "$output"
          echo "::error ::status from set variable call is $status"
          exit 1
        fi
        echo "Set vars.${VARIABLE}=${VALUE} in $REPO"
