name: Set environment vars

inputs:
  private_access_token:
    required: false
  terraform_private_key:
    required: false
  yaml:
    required: true

outputs:
  access_domain:
    value: ${{ steps.get-vars.outputs.access_domain }}
  access_role:
    value: ${{ steps.get-vars.outputs.access_role }}
  backend_account:
    value: ${{ steps.get-vars.outputs.backend_account }}
  backend_bucket:
    value: ${{ steps.get-backend-bucket.outputs.backend_bucket }}
  backend_region:
    value: ${{ steps.get-vars.outputs.backend_region }}
  deployment_account:
    value: ${{ steps.get-vars.outputs.backend_account }} # TODO:
  deployment_name:
    value: ${{ steps.get-deployment-name.outputs.name }}
  deployment_region:
    value: ${{ steps.get-vars.outputs.backend_region }} # TODO:
  environment:
    value: ${{ steps.get-vars.outputs.environment }}
  oidc_principal:
    value: ${{ steps.get-vars.outputs.oidc_principal }}
  state_file:
    value: ${{ steps.get-state-file.outputs.state_file }}
  token:
    value: ${{ steps.get-token.outputs.token }}

runs:
  using: composite
  steps:

    - name: Get vars
      id: get-vars
      shell: bash
      run: |
        # get-vars
        echo "$BASH_VERSION"
        yaml="${{ inputs.yaml }}"
        echo "$yaml"
        IFS=$'\n' lines=($yaml)
        for l in "${lines[@]}" ; do
          key=${l%%:*}
          val=${l##*: }
          if [ -n "$val" ] ; then
            # echo "$key=$val" | tee -a $GITHUB_OUTPUT
            echo "$key=$val" >> $GITHUB_OUTPUT
            echo "${key^^}=$val" >> $GITHUB_ENV
          else
            echo "ERROR: $key is empty. exiting."
            exit 1
          fi
        done

    - name: Get Token
      if: inputs.private_access_token != '' || inputs.terraform_private_key != ''
      id: get-token
      uses: stormreply/storm-library-for-terraform/.github/actions/get/token@main
      with:
        private_access_token: ${{ inputs.private_access_token }}
        terraform_app_id: ${{ env.TERRAFORM_APP_ID }}
        terraform_private_key: ${{ inputs.terraform_private_key }}

    - name: Get backend bucket
      if: env.BACKEND_ACCOUNT != ''
      id: get-backend-bucket
      uses: stormreply/storm-library-for-terraform/.github/actions/get/backend-bucket@main
      with:
        backend_account: ${{ env.BACKEND_ACCOUNT }}

    - name: Get deployment name
      id: get-deployment-name
      uses: stormreply/storm-library-for-terraform/.github/actions/get/deployment-name@main
      with:
        environment: ${{ env.ENVIRONMENT }}
        token: ${{ steps.get-token.outputs.token }}

    - name: Get state file
      id: get-state-file
      uses: stormreply/storm-library-for-terraform/.github/actions/get/state-file@main
      with:
        deployment_name: ${{ steps.get-deployment-name.outputs.name }}

    - name: Show vars
      id: show-vars
      shell: bash
      run: |
        # show-vars

        pat="${{ inputs.private_access_token }}"
        tpk="${{ inputs.terraform_private_key }}"

        BACKEND_BUCKET="${{ steps.get-backend-bucket.outputs.backend_bucket}}"
        DEPLOYMENT_NAME="${{ steps.get-deployment-name.outputs.name }}"
        STATE_FILE="${{ steps.get-state-file.outputs.state_file }}"
        TOKEN="${{ steps.get-token.outputs.token }}"

        cat << EOF >> $GITHUB_ENV
        BACKEND_BUCKET="$BACKEND_BUCKET"
        DEPLOYMENT_NAME="$DEPLOYMENT_NAME"
        STATE_FILE="$STATE_FILE"
        TOKEN="$TOKEN"
        EOF

        echo "access domain:         $ACCESS_DOMAIN"
        echo "access role:           $ACCESS_ROLE"
        echo "backend account:       $BACKEND_ACCOUNT"
        echo "backend region:        $BACKEND_REGION"
        echo "deployment account:    $BACKEND_ACCOUNT"
        echo "deployment region:     $BACKEND_REGION"
        echo "environment:           $ENVIRONMENT"
        echo "oidc principal:        $OIDC_PRINCIPAL"
        echo "terraform app id:      $TERRAFORM_APP_ID"
        echo
        echo "backend bucket:        $BACKEND_BUCKET"
        echo "deployment name:       $DEPLOYMENT_NAME"
        echo "state file:            $STATE_FILE"
        echo
        echo "private access token length:  ${#pat}"
        echo "terraform private key length: ${#tpk}"
        echo
        echo "token length: ${#TOKEN}"
