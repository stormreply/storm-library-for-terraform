name: Set deployment name

runs:
  using: composite
  steps:
    - name: set deployment name
      id: set-deployment-name
      shell: bash
      run: |
        # set-environment/from-others/set-deployment-name

        api="x-access-token:${{ env.TOKEN }}@api.github.com"
        path="repos/stormreply/storm-library-for-terraform/contents"
        file=catalog.yaml

        output=$(
          curl \
            -o "${file}" \
            -H "Accept: application/vnd.github.raw" \
            "https://${api}/${path}/${file}" \
          2> /dev/null
        )

        status=$(
          cat catalog.yaml | jq '( .status // empty )' 2> /dev/null \
          || true
        ) # "|| true" is for jq can't parse - as it ought to be yaml
        # status is "" or HTTP error code
        if [ -n "$status" ] ; then
          cat catalog.yaml
          echo "::error ::status from download call is $status"
          exit 1
        fi

        repository=${{ github.repository }}
        repo=${repository##*/}

        yq '.catalog["'${repo}'"]' catalog.yaml > catalog_item.yaml
        catalog_id=$(cat catalog_item.yaml | yq .id)
        [ "$catalog_id" = "null" ] \
          && echo "::error ::${repo} or its id are not known to the catalog" \
          && exit 1
        echo "slt catalog id for $repo: $catalog_id"
        catalog_reference="slt-${catalog_id}"
        rm catalog.yaml

        deployment_name="${catalog_reference}-${repo}"

        if [ "${catalog_id}" != "0" ] ; then
          [ -n "${{ env.ENVIRONMENT }}" ] \
          && environment="${{ env.ENVIRONMENT }}" \
          || environment="${{ github.actor }}"
          deployment_name="${deployment_name}-${environment}"
        fi
        echo "deployment_name=$deployment_name"
        echo << EOF | tee -a $GITHUB_ENV
        DEPLOYMENT_NAME=$deployment_name
        EOF
