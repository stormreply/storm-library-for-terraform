name: Set token

runs:
  using: composite
  steps:

    - name: Check if GitHub App is installed
      id: check_app
      shell: bash
      run: |
        response=$(curl -s -H "Authorization: token ${{ env.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/installations)

        echo "$response" | jq '.' # nur zum Debuggen

        # if echo "$response" | grep -q "your-app-name"; then
        #   echo "installed=true" >> "$GITHUB_OUTPUT"
        # else
        #   echo "installed=false" >> "$GITHUB_OUTPUT"
        # fi

    - name: create github app token
      if: env.TERRAFORM_APP_ID != '' && env.TERRAFORM_PRIVATE_KEY != ''
      id: create-github-app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ env.TERRAFORM_APP_ID }}
        private-key: ${{ env.TERRAFORM_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}

    - name: set Token
      id: set-token
      shell: bash
      run: |
        # set-environment/from-others/set-token

        type="Github App Token" # so far
        token="${{ steps.create-github-app-token.outputs.token }}"

        if [ -z "${token}" ] ; then
          token=${{ env.PERSONAL_ACCESS_TOKEN }}
          type="Personal Access Token"
        fi

        if [ -z "${token}" ] ; then
          token=${{ env.GITHUB_TOKEN }}
          type="GITHUB_TOKEN"
        fi

        if [ ${#token} -eq 0 ] ; then
          echo "::error title=No valid token::could not get a token"
          exit 1
        fi

        echo "::notice ::using your $type as token"

        cat << EOF | tee -a $GITHUB_ENV
        TOKEN=$token
        EOF
