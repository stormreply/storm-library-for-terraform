name: OIDC

on:
  workflow_dispatch:
    # checkov:skip=CKV_GHA_7: "GitHub Actions workflow_dispatch inputs MUST be empty"
    inputs:
      access_domain:
        type: string
        required: true
      access_role:
        type: string
        required: true
        default: AdministratorAccess
      backend_account:
        type: string
        required: true
      backend_region:
        type: string
        required: true
        default: eu-central-1
      github_principal:
        type: string
        required: true
        description: "Github principal"
        default: "DEFAULT"

permissions:
  actions: write
  contents: read

jobs:

  sso:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.sso.outputs.access_token }}
    steps:

      - name: Single sign on
        id: sso
        uses: stormreply/storm-library-for-terraform/.github/actions/init/single-sign-on@main
        with:
          access_domain: ${{ inputs.access_domain }}
          backend_region: ${{ inputs.backend_region }}

  init:
    needs: sso
    runs-on: ubuntu-latest
    steps:

      - name: Get role credentials
        uses: stormreply/storm-library-for-terraform/.github/actions/init/get-role-credentials@main
        with:
          access_role: ${{ inputs.access_role }}
          access_token: ${{ needs.sso.outputs.access_token }}
          backend_account: ${{ inputs.backend_account }}
          backend_region: ${{ inputs.backend_region }}

      - name: Prepare
        uses: stormreply/storm-library-for-terraform/.github/actions/prepare@main
        id: prepare
        with:
          backend_account: ${{ inputs.backend_account }}
          backend_region: ${{ inputs.backend_region }}
          use_oidc: false

      - name: Check SLT backend bucket
        # TODO: split into 2 actions
        if: github.repository == 'stormreply/storm-library-for-terraform' # TODO: not only stormreply
        shell: bash
        run: |
          backend_bucket=${{ steps.prepare.outputs.backend_bucket }}
          github_principal=${{ inputs.github_principal }}
          aws s3api create-bucket \
            --bucket ${backend_bucket} \
            --region ${{ inputs.backend_region }} \
            --create-bucket-configuration LocationConstraint=${{ inputs.backend_region }} \
          || true
          cat << EOF >> init.tfvars
          backend_bucket   = "${backend_bucket}"
          github_principal = "${github_principal}"
          EOF

      - name: Terraform plan
        # if: github.repository == 'stormreply/storm-library-for-terraform' # TODO: not only stormreply
        uses: stormreply/storm-library-for-terraform/.github/actions/terraform/plan@main
        with:
          backend_bucket: ${{ steps.prepare.outputs.backend_bucket }}
          backend_region: ${{ inputs.backend_region }}
          state_file: ${{ steps.prepare.outputs.state_file }}
          var_file: init.tfvars

      - name: Terraform apply
        # if: github.repository == 'stormreply/storm-library-for-terraform' # TODO: not only stormreply
        uses: stormreply/storm-library-for-terraform/.github/actions/terraform/apply@main
        with:
          backend_bucket: ${{ steps.prepare.outputs.backend_bucket }}
          backend_region: ${{ inputs.backend_region }}
          state_file: ${{ steps.prepare.outputs.state_file }}
          var_file: init.tfvars
